
コメントの目的
・書き手の意図を読み手に知らせること

コメントすべきでないことはコメントしない
・コードからすぐわかることは書かない
例)
    // Accountクラスの定義
    class Account {
        public:
            //コンストラクタ
            Account();
            ...

・コメントをすることを目的としない
    コードがひどいなら、コードを修正する(以下)

・コメントの必要な関数名は関数名を変える
    「優れたコード > ひどいコード + 優れたコメント」

自分の考えを記録する
・なぜこのロジックでコードを書いたかを記録する
・コードの欠陥にコメントをつける
・定数にコメントする(なぜ、その定数にしたのか)

読み手の立場になってコメントする
・質問されそうなことをコメントする
・はまりそうなことをコメントする
・処理の「全体像」・「要約」をコメントする



6章 コメントは正確で簡潔に
コメントは領域に対する情報の比率が高くなくてはいけない

コメントを簡潔にしておく
・少ない文字数でおさまるようにする

曖昧な代名詞を避ける
・「その」や「それ」を使わないようにする

歯切れの悪い文章を磨く
・これまでにクロールしたURLかどうかによって優先度を変える
↓
・これまでにクロールしていないURLの優先度を高くする

関数の動作を正確に記述する
・「行数を返す」--> 「改行文字を数える」

引数と戻り値の例を書く
・具体的に何が渡されて、何が帰ってくるのかを例に示す

コードの意図を書く
・コードの内容を書くよりも少し抽象度を高くして書く
    ・「listを逆順にイテレートする」-> 「値段の高い順に表示」

名前付き引数を使うことで意図を残す
・Connect(timeout=10, use_encryption=10)

情報密度の高い言葉を残す
・適切なIT用語をつかう(例: キャッシュ、正規化)
6章 コメントは正確で簡潔に
コメントは領域に対する情報の比率が高くなくてはいけない

コメントを簡潔にしておく
・少ない文字数でおさまるようにする

曖昧な代名詞を避ける
・「その」や「それ」を使わないようにする

歯切れの悪い文章を磨く
・これまでにクロールしたURLかどうかによって優先度を変える
↓
・これまでにクロールしていないURLの優先度を高くする

関数の動作を正確に記述する
・「行数を返す」--> 「改行文字を数える」

引数と戻り値の例を書く
・具体的に何が渡されて、何が帰ってくるのかを例に示す

コードの意図を書く
・コードの内容を書くよりも少し抽象度を高くして書く
    ・「listを逆順にイテレートする」-> 「値段の高い順に表示」

名前付き引数を使うことで意図を残す
・Connect(timeout=10, use_encryption=10)

情報密度の高い言葉を残す
・適切なIT用語をつかう(例: キャッシュ、正規化)
6章 コメントは正確で簡潔に
コメントは領域に対する情報の比率が高くなくてはいけない

コメントを簡潔にしておく
・少ない文字数でおさまるようにする

曖昧な代名詞を避ける
・「その」や「それ」を使わないようにする

歯切れの悪い文章を磨く
・これまでにクロールしたURLかどうかによって優先度を変える
↓
・これまでにクロールしていないURLの優先度を高くする

関数の動作を正確に記述する
・「行数を返す」--> 「改行文字を数える」

引数と戻り値の例を書く
・具体的に何が渡されて、何が帰ってくるのかを例に示す

コードの意図を書く
・コードの内容を書くよりも少し抽象度を高くして書く
    ・「listを逆順にイテレートする」-> 「値段の高い順に表示」

名前付き引数を使うことで意図を残す
・Connect(timeout=10, use_encryption=10)

情報密度の高い言葉を残す
・適切なIT用語をつかう(例: キャッシュ、正規化)
6章 コメントは正確で簡潔に
コメントは領域に対する情報の比率が高くなくてはいけない

コメントを簡潔にしておく
・少ない文字数でおさまるようにする

曖昧な代名詞を避ける
・「その」や「それ」を使わないようにする

歯切れの悪い文章を磨く
・これまでにクロールしたURLかどうかによって優先度を変える
↓
・これまでにクロールしていないURLの優先度を高くする

関数の動作を正確に記述する
・「行数を返す」--> 「改行文字を数える」

引数と戻り値の例を書く
・具体的に何が渡されて、何が帰ってくるのかを例に示す

コードの意図を書く
・コードの内容を書くよりも少し抽象度を高くして書く
    ・「listを逆順にイテレートする」-> 「値段の高い順に表示」

名前付き引数を使うことで意図を残す
・Connect(timeout=10, use_encryption=10)

情報密度の高い言葉を残す
・適切なIT用語をつかう(例: キャッシュ、正規化)
6章 コメントは正確で簡潔に
コメントは領域に対する情報の比率が高くなくてはいけない

コメントを簡潔にしておく
・少ない文字数でおさまるようにする

曖昧な代名詞を避ける
・「その」や「それ」を使わないようにする

歯切れの悪い文章を磨く
・これまでにクロールしたURLかどうかによって優先度を変える
↓
・これまでにクロールしていないURLの優先度を高くする

関数の動作を正確に記述する
・「行数を返す」--> 「改行文字を数える」

引数と戻り値の例を書く
・具体的に何が渡されて、何が帰ってくるのかを例に示す

コードの意図を書く
・コードの内容を書くよりも少し抽象度を高くして書く
    ・「listを逆順にイテレートする」-> 「値段の高い順に表示」

名前付き引数を使うことで意図を残す
・Connect(timeout=10, use_encryption=10)

情報密度の高い言葉を残す
・適切なIT用語をつかう(例: キャッシュ、正規化)
6章 コメントは正確で簡潔に
コメントは領域に対する情報の比率が高くなくてはいけない

コメントを簡潔にしておく
・少ない文字数でおさまるようにする

曖昧な代名詞を避ける
・「その」や「それ」を使わないようにする

歯切れの悪い文章を磨く
・これまでにクロールしたURLかどうかによって優先度を変える
↓
・これまでにクロールしていないURLの優先度を高くする

関数の動作を正確に記述する
・「行数を返す」--> 「改行文字を数える」

引数と戻り値の例を書く
・具体的に何が渡されて、何が帰ってくるのかを例に示す

コードの意図を書く
・コードの内容を書くよりも少し抽象度を高くして書く
    ・「listを逆順にイテレートする」-> 「値段の高い順に表示」

名前付き引数を使うことで意図を残す
・Connect(timeout=10, use_encryption=10)

情報密度の高い言葉を残す
・適切なIT用語をつかう(例: キャッシュ、正規化)

